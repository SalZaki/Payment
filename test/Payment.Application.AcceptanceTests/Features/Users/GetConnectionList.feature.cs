// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Payment.Application.AcceptanceTests.Features.Users
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetConnectionListFeature : object, Xunit.IClassFixture<GetConnectionListFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetConnectionList.feature"
#line hidden
        
        public GetConnectionListFeature(GetConnectionListFeature.FixtureData fixtureData, Payment_Application_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Users", "Get Connection List", "![User] (../../../assets/user.svg)\n\n    In order to support users in the system\n\n" +
                    "    As a user service\n\n    I want to facilitate the retrieval of connection list" +
                    " between two users", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
    #line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "FullName"});
            table6.AddRow(new string[] {
                        "73AC6B13-780F-4395-B468-506904422719",
                        "John Doe"});
            table6.AddRow(new string[] {
                        "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF",
                        "Samantha James"});
            table6.AddRow(new string[] {
                        "639A1CDD-7915-47E5-AA2B-263873542B28",
                        "Dr Andrew Martin"});
            table6.AddRow(new string[] {
                        "11CC3F2D-081A-451D-9387-8B8989CA9C06",
                        "Sarah Williams"});
#line 12
      testRunner.Given("following users in the system", ((string)(null)), table6, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get connection list - users have no friends")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Connection List")]
        [Xunit.TraitAttribute("Description", "Get connection list - users have no friends")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "happy-paths")]
        [Xunit.InlineDataAttribute("\"73AC6B13-780F-4395-B468-506904422719\"", "\"FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF\"", "3", new string[0])]
        public void GetConnectionList_UsersHaveNoFriends(string userId1, string userId2, string maxLevel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "user",
                    "happy-paths"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserId1", userId1);
            argumentsOfScenario.Add("UserId2", userId2);
            argumentsOfScenario.Add("MaxLevel", maxLevel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get connection list - users have no friends", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 26
      testRunner.Given(string.Format("a user1 with id {0}", userId1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
      testRunner.And(string.Format("a user2 with id {0}", userId2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
      testRunner.And(string.Format("max level is {0}", maxLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
      testRunner.When("I submit the request to get connection list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
      testRunner.And("the response should have empty connected list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get connection list - users are direct friends")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Connection List")]
        [Xunit.TraitAttribute("Description", "Get connection list - users are direct friends")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "happy-paths")]
        [Xunit.InlineDataAttribute("\"73AC6B13-780F-4395-B468-506904422719\"", "\"FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF\"", "3", new string[0])]
        public void GetConnectionList_UsersAreDirectFriends(string userId1, string userId2, string maxLevel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "user",
                    "happy-paths"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserId1", userId1);
            argumentsOfScenario.Add("UserId2", userId2);
            argumentsOfScenario.Add("MaxLevel", maxLevel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get connection list - users are direct friends", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 40
      testRunner.Given(string.Format("a user1 with id {0}", userId1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
      testRunner.And(string.Format("a user2 with id {0}", userId2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FriendId"});
                table7.AddRow(new string[] {
                            "73AC6B13-780F-4395-B468-506904422719",
                            "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF"});
#line 42
      testRunner.And("the user1 has user2 as friend in the system", ((string)(null)), table7, "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FriendId"});
                table8.AddRow(new string[] {
                            "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF",
                            "73AC6B13-780F-4395-B468-506904422719"});
#line 45
      testRunner.And("the user2 has user1 as friend in the system", ((string)(null)), table8, "And ");
#line hidden
#line 48
      testRunner.And(string.Format("max level is {0}", maxLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
      testRunner.When("I submit the request to get connection list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FullName"});
                table9.AddRow(new string[] {
                            "73AC6B13-780F-4395-B468-506904422719",
                            "John Doe"});
                table9.AddRow(new string[] {
                            "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF",
                            "Samantha James"});
#line 51
      testRunner.And("the response should have following connected list", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get connection list - users have mutual friends")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Connection List")]
        [Xunit.TraitAttribute("Description", "Get connection list - users have mutual friends")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "happy-paths")]
        [Xunit.InlineDataAttribute("\"73AC6B13-780F-4395-B468-506904422719\"", "\"FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF\"", "3", new string[0])]
        public void GetConnectionList_UsersHaveMutualFriends(string userId1, string userId2, string maxLevel, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "user",
                    "happy-paths"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserId1", userId1);
            argumentsOfScenario.Add("UserId2", userId2);
            argumentsOfScenario.Add("MaxLevel", maxLevel);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get connection list - users have mutual friends", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 63
      testRunner.Given(string.Format("a user1 with id {0}", userId1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
      testRunner.And(string.Format("a user2 with id {0}", userId2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
      testRunner.And(string.Format("max level is {0}", maxLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FriendId"});
                table10.AddRow(new string[] {
                            "73AC6B13-780F-4395-B468-506904422719",
                            "639A1CDD-7915-47E5-AA2B-263873542B28"});
#line 66
      testRunner.And("user1 has user3 as friend in the system", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FriendId"});
                table11.AddRow(new string[] {
                            "639A1CDD-7915-47E5-AA2B-263873542B28",
                            "11CC3F2D-081A-451D-9387-8B8989CA9C06"});
#line 69
      testRunner.And("user3 has user4 as friend in the system", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FriendId"});
                table12.AddRow(new string[] {
                            "11CC3F2D-081A-451D-9387-8B8989CA9C06",
                            "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF"});
#line 72
      testRunner.And("user4 has user2 as friend in the system", ((string)(null)), table12, "And ");
#line hidden
#line 75
      testRunner.When("I submit the request to get connection list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "FullName"});
                table13.AddRow(new string[] {
                            "73AC6B13-780F-4395-B468-506904422719",
                            "John Doe"});
                table13.AddRow(new string[] {
                            "639A1CDD-7915-47E5-AA2B-263873542B28",
                            "Dr Andrew Martin"});
                table13.AddRow(new string[] {
                            "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF",
                            "Samantha James"});
                table13.AddRow(new string[] {
                            "11CC3F2D-081A-451D-9387-8B8989CA9C06",
                            "Sarah Williams"});
#line 77
      testRunner.And("the response should have following connected list", ((string)(null)), table13, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetConnectionListFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetConnectionListFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
