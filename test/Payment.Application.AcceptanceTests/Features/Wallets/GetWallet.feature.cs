// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Payment.Application.AcceptanceTests.Features.Wallets
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetWalletFeature : object, Xunit.IClassFixture<GetWalletFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetWallet.feature"
#line hidden
        
        public GetWalletFeature(GetWalletFeature.FixtureData fixtureData, Payment_Application_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Wallets", "Get Wallet", "![Wallet] (../assets/wallet.svg)\n\n    In order to use wallets in the system\n\n    " +
                    "As a wallet service\n\n    I want to facilitate the retrieval of wallets", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
    #line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "WalletId",
                        "UserId",
                        "Currency",
                        "Amount"});
            table32.AddRow(new string[] {
                        "73AC6B13-780F-4395-B468-506904422719",
                        "150A98BE-7F10-4BA4-A8B5-05B20E7A3A49",
                        "DZD",
                        "32.12"});
            table32.AddRow(new string[] {
                        "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF",
                        "20C11779-5236-42A0-A636-1D6F7AE8AF7F",
                        "CAD",
                        "54.33"});
#line 12
      testRunner.Given("following wallets in the system", ((string)(null)), table32, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "WalletId",
                        "ContributorId",
                        "Currency",
                        "Amount",
                        "Country"});
            table33.AddRow(new string[] {
                        "73AC6B13-780F-4395-B468-506904422719",
                        "8A959DA8-C4BB-46EC-9CE9-BFD051822A90",
                        "GBP",
                        "41.10",
                        "UK"});
            table33.AddRow(new string[] {
                        "73AC6B13-780F-4395-B468-506904422719",
                        "8A959DA8-C4BB-46EC-9CE9-BFD051822A90",
                        "GBP",
                        "43.00",
                        "UK"});
            table33.AddRow(new string[] {
                        "73AC6B13-780F-4395-B468-506904422719",
                        "8A959DA8-C4BB-46EC-9CE9-BFD051822A90",
                        "GBP",
                        "167.50",
                        "UK"});
            table33.AddRow(new string[] {
                        "73AC6B13-780F-4395-B468-506904422719",
                        "8A959DA8-C4BB-46EC-9CE9-BFD051822A90",
                        "GBP",
                        "599.99",
                        "UK"});
#line 16
      testRunner.And("following shares for a wallet in the system", ((string)(null)), table33, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="[01/02] Get a wallet with no shares")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Wallet")]
        [Xunit.TraitAttribute("Description", "[01/02] Get a wallet with no shares")]
        [Xunit.TraitAttribute("Category", "wallet")]
        [Xunit.TraitAttribute("Category", "happy-paths-with-no-share")]
        [Xunit.InlineDataAttribute("\"FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF\"", new string[0])]
        public void _0102GetAWalletWithNoShares(string walletId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "wallet",
                    "happy-paths-with-no-share"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WalletId", walletId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[01/02] Get a wallet with no shares", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 31
      testRunner.Given(string.Format("a wallet id {0} with no shares", walletId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
      testRunner.When("I submit the request to get a wallet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "WalletId",
                            "UserId",
                            "ContributorId",
                            "Currency",
                            "Amount",
                            "ShareCount",
                            "TotalSharesAmount"});
                table34.AddRow(new string[] {
                            "FF8C0411-745E-4E11-ADAF-8C9C3C5E34AF",
                            "20C11779-5236-42A0-A636-1D6F7AE8AF7F",
                            "00000000-0000-0000-0000-000000000000",
                            "CAD",
                            "54.33",
                            "0",
                            "0.00"});
#line 34
      testRunner.And("the wallet should have", ((string)(null)), table34, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="[02/02] Get a wallet with shares")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Wallet")]
        [Xunit.TraitAttribute("Description", "[02/02] Get a wallet with shares")]
        [Xunit.TraitAttribute("Category", "wallet")]
        [Xunit.TraitAttribute("Category", "happy-paths-with-with-share")]
        [Xunit.InlineDataAttribute("\"73AC6B13-780F-4395-B468-506904422719\"", new string[0])]
        public void _0202GetAWalletWithShares(string walletId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "wallet",
                    "happy-paths-with-with-share"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("WalletId", walletId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[02/02] Get a wallet with shares", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 45
      testRunner.Given(string.Format("a wallet id {0} with shares", walletId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
      testRunner.When("I submit the request to get a wallet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "WalletId",
                            "UserId",
                            "ContributorId",
                            "Currency",
                            "Amount",
                            "ShareCount",
                            "TotalSharesAmount"});
                table35.AddRow(new string[] {
                            "73AC6B13-780F-4395-B468-506904422719",
                            "150A98BE-7F10-4BA4-A8B5-05B20E7A3A49",
                            "8A959DA8-C4BB-46EC-9CE9-BFD051822A90",
                            "DZD",
                            "32.12",
                            "1",
                            "851.59"});
#line 48
      testRunner.And("the wallet should have", ((string)(null)), table35, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetWalletFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetWalletFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
