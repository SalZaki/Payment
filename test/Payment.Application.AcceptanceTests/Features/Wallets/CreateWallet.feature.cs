// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Payment.Application.AcceptanceTests.Features.Wallets
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateWalletFeature : object, Xunit.IClassFixture<CreateWalletFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateWallet.feature"
#line hidden
        
        public CreateWalletFeature(CreateWalletFeature.FixtureData fixtureData, Payment_Application_AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Wallets", "Create Wallet", "![Wallet] (../assets/wallet.svg)\n\n    In order to use wallets in the system\n\n    " +
                    "As a wallet service\n\n    I want to facilitate the creation of new wallets", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
    #line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Fullname"});
            table29.AddRow(new string[] {
                        "4E162382-324E-49B7-8629-EB5A929BCB44",
                        "Susan Reed"});
            table29.AddRow(new string[] {
                        "06839E7B-18D1-4FFB-8688-5B0E60F6A5B5",
                        "John Peters"});
#line 12
      testRunner.Given("the following users exists in the system", ((string)(null)), table29, "Given ");
#line hidden
#line 16
      testRunner.And("there are no wallets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="[01/02] Create a wallet with no amount")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Wallet")]
        [Xunit.TraitAttribute("Description", "[01/02] Create a wallet with no amount")]
        [Xunit.TraitAttribute("Category", "wallet")]
        [Xunit.TraitAttribute("Category", "happy-paths-with-no-amount")]
        [Xunit.InlineDataAttribute("06839E7B-18D1-4FFB-8688-5B0E60F6A5B5", new string[0])]
        public void _0102CreateAWalletWithNoAmount(string userId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "wallet",
                    "happy-paths-with-no-amount"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserId", userId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[01/02] Create a wallet with no amount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 27
      testRunner.And(string.Format("a user id {0}", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
      testRunner.When("I submit the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
      testRunner.And("the response should have a newly created wallet id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "ShareCount",
                            "Amount",
                            "TotalSharesAmount"});
                table30.AddRow(new string[] {
                            "06839E7B-18D1-4FFB-8688-5B0E60F6A5B5",
                            "0",
                            "0.00",
                            "0.00"});
#line 31
      testRunner.And("the wallet should have", ((string)(null)), table30, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="[02/02] Create a wallet with amount")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Wallet")]
        [Xunit.TraitAttribute("Description", "[02/02] Create a wallet with amount")]
        [Xunit.TraitAttribute("Category", "wallet")]
        [Xunit.TraitAttribute("Category", "happy-paths-with-amount")]
        [Xunit.InlineDataAttribute("06839E7B-18D1-4FFB-8688-5B0E60F6A5B5", "GBP", "100.00", new string[0])]
        public void _0202CreateAWalletWithAmount(string userId, string currency, string amount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "wallet",
                    "happy-paths-with-amount"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserId", userId);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Amount", amount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("[02/02] Create a wallet with amount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    this.FeatureBackground();
#line hidden
#line 42
      testRunner.And(string.Format("a user id {0}", userId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
      testRunner.And(string.Format("currency {0} and amount {1}", currency, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
      testRunner.When("I submit the request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
      testRunner.Then("the response should be successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
      testRunner.And("the response should have a newly created wallet id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserId",
                            "ShareCount",
                            "Currency",
                            "Amount",
                            "TotalSharesAmount"});
                table31.AddRow(new string[] {
                            "06839E7B-18D1-4FFB-8688-5B0E60F6A5B5",
                            "0",
                            "GBP",
                            "100.00",
                            "0.00"});
#line 47
      testRunner.And("the wallet should have", ((string)(null)), table31, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateWalletFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateWalletFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
